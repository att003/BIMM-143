---
title: "Class 12: Transcriptomics and the analysis of RNA-Seq data"
author: "Anh Tran"
format: pdf
---

# 2. Import countData and colData

```{r}
metadata <- read.csv("airway_metadata.csv")
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
```

```{r}
head(metadata)
head(counts)
```

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

>Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
```

First we should check the corespondence of the metadata and count data

```{r}
metadata$id
```

```{r}
colnames(counts)
```

To check that these are all in the same order we can use `==` to test the equality

```{r}
all(metadata$id == colnames(counts))
```

# 3. Toy differential gene expression

## Analysis via comparison of CONTROL vs TREATED

The "treated" have the dex drug and the "control" do not. 
First I need to be able to extract just the "control" columns in the `metadata` data set

```{r}
control.inds <- metadata$dex=="control"
control <- metadata[control.inds,]
control$id
```

I can use this to access just the "control" columns of my `counts` data

```{r} 
control.counts <- counts[,control$id]
head(control.counts)
```

Find the mean count value for each transcript/gene by binding the `rowMeans()`

```{r}
control.mean <- rowMeans(control.counts)
head(control.mean)
```

>Q3. How would you make the above code in either approach more robust?

The code `control.mean <- rowSums( control.counts )/4` is limited because the denomination is fixed for this data set at 4. We can use function rowMeans instead to make this approach more robust. 

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata$dex=="treated",]
treated.counts <- counts[,treated$id]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

Now I have `control.means` and `treated.means`. Let's put these together for safe keeping and ease of use later. 

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

```{r}
colSums(meancounts)
```

Let's do a quick plot to see how our data looks

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```
>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

point

This is very heavily skewed and over a wide range - calling out for a log transform

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

The argument is log

```{r}
plot(meancounts, log="xy")
```

We like working with log transformed data as it can help make things more straightforward to interpret. 

If we have no change: 

```{r}
log2(20/20)
```

What about if we had a doubling/halfing

```{r}
log2(40/20)
log2(10/20)
```

We like working with log2 fold-change values. Let's calculate them for our data. 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind=TRUE argument will clause which() to return both the row and column indices (i.e. positions) where there are TRUE values. In this case this will tell us which genes (rows) and samples (columns) have zero counts. We are going to ignore any genes that have zero counts in any sample so we just focus on the row answer. Calling unique() will ensure we dont count any row twice if it has zero entries in both samples.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```

>Q10. Do you trust these results? Why or why not?

No, these results in their current form are likely to be very misleading. All our analysis has been done based on fold change but fold change can be large without being statistically significant (e.g. based on p-values). We have not done anything yet to determine whether the differences we are seeing are significant. 

A common threshold for calling genes as differentialy expressed is a log2 fold-change of +2 or -2. 

```{r}
sum(mycounts$log2fc >= +2)
```

What percent is this?

```{r}
round((sum(mycounts$log2fc >= +2)/nrow(mycounts)) * 100)
```

We need some stats to check if the drug induced difference is significant

# Turn to DESeq2

Let's turn to doing this the correct way with the DESeq2 package. 

```{r, message=FALSE}
library(DESeq2)
```

The main function in the DESeq2 package is called `deseq()`. It wants our count data and our colData (metadata) as input in a specific way. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata, 
                       design = ~dex)
```

```{r}
dds <- DESeq(dds)
res <- results(dds)
head(res)
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

# Adding annotation data

Now what we have got so far is the log2 fold-change and the adjusted p-value for the significance. 

```{r}
plot(res$log2FoldChange, res$padj)
```

I am going to take the log of the p-value

```{r}
plot(res$log2FoldChange, log(res$padj))
```
We can flip the y-axis so the plot does not look "upside down". 

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(-2,+2), col="red")
abline(h=log(0.05), col="red")
```

## Annotation of our gene set results

I will start by loading two Annotation packages from bioconductor

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

The `mapID()` function maps database identifiers between different databases. In other words it translates the identifiers used by one database to that used by another database. 

Let's seee what databases are available for Human data

```{r}
columns(org.Hs.eg.db)
```

My results are in the object `res`

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     keytype="ENSEMBL",
                     column="SYMBOL",
                     multiVals="first")
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
ord <- order( res$padj )
head(res[ord,])
```
```{r}
write.csv(res[ord,], "deseq_results.csv")
```

# Data Visualization

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

# Pathway analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

The main `gage()` function wants a vector as input that contains our measure of importance - in our case that is fold-change. The vector needs to have ENTREZ ids as the names of the vector. 

Recall that vectors have names - this is useful for book-keeping so I know what value corresponds to a certain gene for example. 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now we can run the analysis

```{r}
#Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

What is in this results object

```{r}
attributes(keggres)
```

By default gage splits it's results into "greater" and "less" objects that you can examine

```{r}
head(keggres$less, 3)
```

We can now look in more detail at these pathways. The `pathview()` function will take the KEGG pathway ID (printed first above) and our vector of importance and annotate the pathway with our guests. 

First I will look at hsa05310 Asthma

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The Asthma pathway with out genes colored](hsa05310.pathview.png)
# A different PDF based output of the same data

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```

>Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05332")
```
![The Graft-versus-host disease pathway](hsa05332.pathview.png)

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04940")
```
![Type I diabetes mellitus](hsa04940.pathview.png)
